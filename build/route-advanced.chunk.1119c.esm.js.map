{"version":3,"sources":["webpack:///./utils/calculations.js","webpack:///./components/containers/GridItem.js","webpack:///./components/containers/ItemGroup.js","webpack:///./components/containers/MainContainer.js","webpack:///./components/form/PickerArrow.js","webpack:///./components/form/PickerItem.js","webpack:///./components/form/Picker.js","webpack:///./utils/platformCharges.js","webpack:///./data/platforms.js","webpack:///./components/form/ChargeLabel.js","webpack:///./components/form/TextDisplay.js","webpack:///./components/form/Charge.js","webpack:///./components/global/Disclaimer.js","webpack:///./components/form/FromPicker.js","webpack:///./components/form/ToPicker.js","webpack:///./routes/advanced/index.js","webpack:///./components/global/GetOnGooglePlay.js","webpack:///./components/form/TextField.js"],"names":["exemption","previousAmount","finalExemptionAmount","initialExemptAmount","getTaxableAmount","amount","exempt","taxableAmount","getElevyCharge","elevyTax","GridItem","className","children","defaultProps","ItemGroup","MainContainer","PickerArrow","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","PickerItem","handleSelect","theme","role","onClick","title","Picker","data","updateChoice","close","class","x1","y1","x2","y2","values","map","item","key","name","MTN_TO_MTN_CHARGE","MTN_TO_OTHERS_EXEMPT","platforms","Map","company","img","getCharge","source","destination","charge","rate","calculatePlatformCharge","sendingFrom","sendingTo","get","platformFunction","getPlatformCharge","ChargeLabel","label","TextDisplay","Charge","value","chargeProps","toLocaleString","maximumFractionDigits","minimumFractionDigits","Disclaimer","FromPicker","id","handleChange","tabIndex","event","ToPicker","Advanced","showSimple","setAmount","useState","setPreviousAmount","showPicker","setShowPicker","pickerType","setPickerType","transferAmount","setTransferAmount","elevyAmount","setElevyAmount","setSendingFrom","setSendingTo","platformCharge","setPlatformCharge","elevyChargeRef","useRef","pickerData","from","pickerTitle","to","useEffect","elevyCharge","callback","parsedAmount","parseInt","target","replaceAll","isNaN","handlePickerChange","selection","console","log","method","TextField","placeholder","inputProps","pattern","inputMode","required","onInput","e","onKeyUp","keyCode","current","focus","ref","type","preventDefault","preserveChoice","advanced","selectedPicker","GetOnGooglePlay","showBadge","setShowBadge","pwaDisplayMode","isStandalone","window","matchMedia","matches","document","referrer","startsWith","navigator","standalone","getPWADisplayMode","href","rel","alt","src","for"],"mappings":"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","file":"route-advanced.chunk.1119c.esm.js","sourcesContent":["import { platforms } from \"../data/platforms\";\r\n\r\nexport const elevyTax = 0.01; //1/100\r\n\r\nexport function exemption(previousAmount) {\r\n  let finalExemptionAmount = 0;\r\n  let initialExemptAmount = 100;\r\n  if (previousAmount >= initialExemptAmount) {\r\n    finalExemptionAmount = 0; //  user has used up all exemption value for the day and therefore has no exemptions left\r\n  } else if (previousAmount < initialExemptAmount) {\r\n    finalExemptionAmount = initialExemptAmount - previousAmount;\r\n  } else {\r\n    finalExemptionAmount = initialExemptAmount;\r\n  }\r\n  return finalExemptionAmount;\r\n}\r\n\r\nexport function getTaxableAmount(amount, exempt) {\r\n  let taxableAmount = amount - exempt;\r\n  if (taxableAmount < 0) {\r\n    return 0;\r\n  }\r\n\r\n  return taxableAmount;\r\n}\r\n\r\nexport function getElevyCharge(taxableAmount, elevyTax) {\r\n  let elevyCharge = taxableAmount * elevyTax;\r\n  return elevyCharge;\r\n}\r\n\r\nexport function calculateCharge({ previousAmount, amount }) {\r\n  // pick calculation from react component\r\n  let exempt = exemption(previousAmount);\r\n  let taxableAmount = getTaxableAmount(amount, exempt);\r\n  let elevyCharge = getElevyCharge(taxableAmount, elevyTax);\r\n  return elevyCharge;\r\n}\r\n\r\nexport function getPlatformCharge({ source, destination, amount }) {\r\n  // get platform charge\r\n  const platformFunction = platforms.get(source).getCharge;\r\n  const platformCharge = platformFunction({\r\n    source,\r\n    destination,\r\n    amount,\r\n  });\r\n  return platformCharge;\r\n}\r\n\r\nexport const calculatePlatformCharge = (sendingFrom, sendingTo, amount) => {\r\n  let source = \"\";\r\n  let destination = \"\";\r\n\r\n  if (sendingFrom === \"\" && sendingTo === \"\") {\r\n    return 0;\r\n  } else if (sendingFrom !== \"\" && sendingTo !== \"\") {\r\n    source = platforms.get(sendingFrom).key;\r\n    destination = platforms.get(sendingTo).key;\r\n  } else if (sendingFrom !== \"\") {\r\n    source = platforms.get(sendingFrom).key;\r\n    destination = platforms.get(sendingFrom).key;\r\n  }\r\n\r\n  const { charge } = getPlatformCharge({\r\n    source,\r\n    destination,\r\n    amount,\r\n  });\r\n  return charge;\r\n};\r\n","import { h } from \"preact\";\r\n\r\nconst GridItem = ({ className, children }) => {\r\n  return <div className={`gridItem ${className}`}>{children}</div>;\r\n};\r\n\r\nGridItem.defaultProps = {\r\n  className: \"\",\r\n};\r\n\r\nexport default GridItem;\r\n","import { h } from \"preact\";\r\n\r\nconst ItemGroup = ({ className, children }) => {\r\n  return <div className={`inputGroup ${className}`}>{children}</div>;\r\n};\r\n\r\nItemGroup.defaultProps = {\r\n  className: \"\",\r\n};\r\n\r\nexport default ItemGroup;\r\n","import { h } from \"preact\";\r\n\r\nconst MainContainer = ({ children }) => {\r\n  return <main className=\"mainContainer\">{children}</main>;\r\n};\r\n\r\nexport default MainContainer;\r\n","\r\nimport { h } from \"preact\";\r\n\r\nconst PickerArrow = () => {\r\n  return (\r\n    <div className=\"arrowContainer\">\r\n      <span className=\"arrow\">\r\n        <span className=\"alternateText\">to</span>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={24}\r\n          height={24}\r\n          viewBox=\"0 0 24 24\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth={2}\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          className=\"feather feather-arrow-right\"\r\n        >\r\n          <path d=\"M5 12L19 12\" />\r\n          <path d=\"M12 5L19 12 12 19\" />\r\n        </svg>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PickerArrow;\r\n","import { h } from \"preact\";\r\n\r\nconst PickerItem = ({ title, handleSelect, theme }) => {\r\n  return (\r\n    <div className={`pickerItem ${theme}`} role=\"button\" onClick={handleSelect}>\r\n      <span className=\"pickerContent\"></span>\r\n    </div>\r\n  );\r\n};\r\n\r\nPickerItem.defaultProps = {\r\n  title: \"\",\r\n  theme: \"\",\r\n};\r\n\r\nexport default PickerItem;\r\n","import { h } from \"preact\";\r\nimport PickerItem from \"./PickerItem\";\r\n\r\nconst Picker = ({ data, title, updateChoice, close }) => {\r\n  return (\r\n    <div className=\"overlayContainer\" onClick={() => close()}>\r\n      <div className=\"pickerContainer\">\r\n        <span className=\"close pointer\" role=\"button\" onClick={() => close()}>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"24\"\r\n            height=\"24\"\r\n            viewBox=\"0 0 24 24\"\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            stroke-width=\"2\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            class=\"feather feather-x\"\r\n          >\r\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\r\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\r\n          </svg>\r\n        </span>\r\n        <div className=\"pickerTitle alignCenter\">\r\n          <span className=\"labelText\">{title}</span>\r\n        </div>\r\n        <div className=\"pickerItemContainer\">\r\n          {[...data.values()].map((item) => (\r\n            <PickerItem\r\n              key={item.key}\r\n              title={item.name}\r\n              theme={item.theme}\r\n              handleSelect={() => {\r\n                updateChoice(item.key);\r\n                close();\r\n                return false;\r\n              }}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Picker;\r\n","const MTN_TO_MTN_EXEMPT = 100;\r\nconst MTN_TO_MTN_CHARGE = 0.75;\r\nconst MTN_TO_OTHERS_EXEMPT = 100; // change to 100 cedis as per sara's screen shot and run test again\r\nconst MTN_TO_OTHERS_CHARGE = 0.75;\r\nconst MTN_ABOVE_1000_CAP = 1000; // above 1000 has a flat fee of 7.5gh\r\nconst ATMONEY_CHARGE = 0.75; // Same airtelTigo charge for all networks\r\nconst ATMONEY_ABOVE_1000_CAP = 1000; // above 1000 has a flat fee of 10gh\r\nconst ATMONEY_EXEMPT = 100;\r\n\r\nexport function mtnMomoTariffs({ source, destination, amount }) {\r\n  let charge = 0;\r\n  let exempt = MTN_TO_OTHERS_EXEMPT;\r\n  let rate = MTN_TO_MTN_CHARGE;\r\n\r\n  if (destination === source) {\r\n    // mtn to mtn\r\n    if (amount >= MTN_ABOVE_1000_CAP) {\r\n      charge = 7.5;\r\n    } else if (amount > MTN_TO_MTN_EXEMPT) {\r\n      charge = (amount * MTN_TO_MTN_CHARGE) / 100;\r\n    }\r\n    exempt = MTN_TO_OTHERS_EXEMPT;\r\n    rate = MTN_TO_MTN_CHARGE;\r\n  } else {\r\n    //mtn to others\r\n    if (amount >= MTN_ABOVE_1000_CAP) {\r\n      charge = 7.5;\r\n    } else if (amount > MTN_TO_OTHERS_EXEMPT) {\r\n      charge = (amount * MTN_TO_OTHERS_CHARGE) / 100;\r\n    }\r\n    exempt = MTN_TO_OTHERS_EXEMPT;\r\n    rate = MTN_TO_OTHERS_CHARGE;\r\n  }\r\n\r\n  return {\r\n    charge,\r\n    exempt,\r\n    rate,\r\n  };\r\n}\r\n\r\nexport function vodafoneCashTariffs({}) {\r\n  return {\r\n    charge: 0,\r\n    exempt: 0,\r\n    rate: 0,\r\n  }; // Haha transfer charge de3 entua bi da! lol\r\n}\r\n\r\nexport function airtelTigoMoneyTariffs({ amount }) {\r\n  let charge = 0;\r\n  charge = (amount * ATMONEY_CHARGE) / 100;\r\n\r\n  if (amount >= ATMONEY_ABOVE_1000_CAP) {\r\n    charge = 7.5;\r\n  }\r\n\r\n  if (amount <= ATMONEY_EXEMPT) {\r\n    charge = 0;\r\n  }\r\n\r\n  return {\r\n    charge,\r\n    exempt: 0,\r\n    rate: ATMONEY_CHARGE,\r\n  };\r\n}\r\n","import {\r\n  airtelTigoMoneyTariffs,\r\n  mtnMomoTariffs,\r\n  vodafoneCashTariffs,\r\n} from \"../utils/platformCharges\";\r\n\r\nexport const platforms = new Map([\r\n  [\r\n    \"mtn\",\r\n    {\r\n      name: \"MTN\",\r\n      company: \"MTN\",\r\n      img: \"./assets/white-waves.png\",\r\n      key: \"mtn\",\r\n      theme: \"mtn\",\r\n      getCharge: mtnMomoTariffs,\r\n    },\r\n  ],\r\n  [\r\n    \"vodafone\",\r\n    {\r\n      name: \"Vodafone\",\r\n      company: \"Vodafone\",\r\n      img: \"./assets/white-waves.png\",\r\n      key: \"vodafone\",\r\n      theme: \"vodafone\",\r\n      getCharge: vodafoneCashTariffs,\r\n    },\r\n  ],\r\n  [\r\n    \"airtel\",\r\n    {\r\n      name: \"AirtelTigo\",\r\n      company: \"AirtelTigo\",\r\n      img: \"./assets/white-waves.png\",\r\n      key: \"airtel\",\r\n      theme: \"airtel\",\r\n      getCharge: airtelTigoMoneyTariffs,\r\n    },\r\n  ],\r\n]);\r\n","import { h } from \"preact\";\r\n\r\nconst ChargeLabel = ({ label, className }) => {\r\n  return <span className={`labelText ${className}`}>{label}</span>;\r\n};\r\n\r\nChargeLabel.defaultProps = {\r\n  className: \"\",\r\n};\r\n\r\nexport default ChargeLabel;\r\n","import { h } from \"preact\";\r\n\r\nconst TextDisplay = ({ className, children }) => {\r\n  return <span className={`displayText ${className}`}>{children}</span>;\r\n};\r\n\r\nTextDisplay.defaultProps = {\r\n  className: \"\",\r\n};\r\n\r\nexport default TextDisplay;\r\n","import { h } from \"preact\";\r\n\r\nconst Charge = ({ className, value, chargeProps }) => {\r\n  return (\r\n    <span\r\n      {...chargeProps}\r\n      className={`chargeAlt ${className}`}\r\n    >{`+ ${value.toLocaleString(\"en-US\", {\r\n      maximumFractionDigits: 2,\r\n      minimumFractionDigits: 2,\r\n    })} GHS`}</span>\r\n  );\r\n};\r\n\r\nCharge.defaultProps = {\r\n  className: \"\",\r\n  chargeProps: {},\r\n};\r\n\r\nexport default Charge;\r\n","import { h } from \"preact\";\r\n\r\nconst Disclaimer = () => {\r\n  return (\r\n    <span className=\"disclaimer\">\r\n      Disclaimer: We did our best to provide accurate results however, you may\r\n      experience differences in real-world usage, since Information on\r\n      Telco and GHIPPS charges are inconsistent.\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Disclaimer;\r\n","import { h } from \"preact\";\r\n\r\nconst FromPicker = ({ id, handleChange, title, theme }) => {\r\n  return (\r\n    <div className=\"fromGrid\" tabIndex={3}>\r\n      <div className=\"selectedText alignRight\">\r\n        <span\r\n          className=\"selectedPlatform pointer\"\r\n          role=\"button\"\r\n          onClick={(event) => handleChange(event, id)}\r\n        >\r\n          {title}\r\n        </span>\r\n        <span\r\n          role=\"button\"\r\n          className=\"togglePicker pointer\"\r\n          onClick={(event) => handleChange(event, id)}\r\n        >\r\n          Tap to change\r\n        </span>\r\n      </div>\r\n      <div\r\n        className={`selectedVisual ${theme} pointer`}\r\n        role=\"button\"\r\n        onClick={(event) => handleChange(event, id)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFromPicker.defaultProps = {\r\n  theme: \"\",\r\n};\r\n\r\nexport default FromPicker;\r\n","import { h } from \"preact\";\r\n\r\nconst ToPicker = ({ id, handleChange, title, theme }) => {\r\n  return (\r\n    <div className=\"toGrid\" tabIndex={4}>\r\n      <div\r\n        className={`selectedVisual ${theme} pointer`}\r\n        role=\"button\"\r\n        onClick={(event) => handleChange(event, id)}\r\n      />\r\n      <div className=\"selectedText\">\r\n        <span\r\n          className=\"selectedPlatform pointer\"\r\n          role=\"button\"\r\n          onClick={(event) => handleChange(event, id)}\r\n        >\r\n          {title}\r\n        </span>\r\n        <span\r\n          role=\"button\"\r\n          className=\"togglePicker pointer\"\r\n          onClick={(event) => handleChange(event, id)}\r\n        >\r\n          Tap to change\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nToPicker.defaultProps = {\r\n  theme: \"\",\r\n};\r\n\r\nexport default ToPicker;\r\n","import { h } from 'preact'\r\nimport { useState, useEffect, useRef } from 'preact/hooks'\r\nimport GridItem from '../../components/containers/GridItem'\r\nimport ItemGroup from '../../components/containers/ItemGroup'\r\nimport MainContainer from '../../components/containers/MainContainer'\r\nimport PickerArrow from '../../components/form/PickerArrow'\r\nimport Picker from '../../components/form/Picker'\r\nimport TextField from '../../components/form/TextField'\r\nimport { platforms } from '../../data/platforms'\r\nimport {\r\n  getElevyCharge,\r\n  exemption,\r\n  getTaxableAmount,\r\n  elevyTax,\r\n  calculatePlatformCharge\r\n} from '../../utils/calculations'\r\nimport ChargeLabel from '../../components/form/ChargeLabel'\r\nimport TextDisplay from '../../components/form/TextDisplay'\r\nimport Charge from '../../components/form/Charge'\r\nimport Disclaimer from '../../components/global/Disclaimer'\r\nimport FromPicker from '../../components/form/FromPicker'\r\nimport ToPicker from '../../components/form/ToPicker'\r\nimport { preserveChoice } from '../../utils/ux-enhancements'\r\nimport GetOnGooglePlay from '../../components/global/GetOnGooglePlay'\r\n\r\nconst Advanced = ({ showSimple }) => {\r\n  // state\r\n  const [amount, setAmount] = useState('')\r\n  const [previousAmount, setPreviousAmount] = useState('')\r\n  const [showPicker, setShowPicker] = useState(false)\r\n  const [pickerType, setPickerType] = useState('')\r\n  const [transferAmount, setTransferAmount] = useState(0)\r\n  const [elevyAmount, setElevyAmount] = useState(0)\r\n  const [sendingFrom, setSendingFrom] = useState('mtn')\r\n  const [sendingTo, setSendingTo] = useState('mtn')\r\n  const [platformCharge, setPlatformCharge] = useState(0)\r\n\r\n  //refs\r\n  let elevyChargeRef = useRef(null)\r\n\r\n  const pickerData = {\r\n    from: {\r\n      pickerTitle: 'You are sending money using:',\r\n      updateChoice: setSendingFrom\r\n    },\r\n    to: {\r\n      pickerTitle: 'You are sending money to someone with:',\r\n      updateChoice: setSendingTo\r\n    }\r\n  }\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    if (amount == '') {\r\n      setTransferAmount(0)\r\n      setElevyAmount(0)\r\n    } else if (previousAmount !== '') {\r\n      let exempt = exemption(previousAmount)\r\n      let taxableAmount = getTaxableAmount(amount, exempt)\r\n      let elevyCharge = getElevyCharge(taxableAmount, elevyTax)\r\n      const platformCharge = calculatePlatformCharge(\r\n        sendingFrom,\r\n        sendingTo,\r\n        amount\r\n      )\r\n      let totalTransferAmount = amount + elevyCharge + platformCharge\r\n\r\n      setTransferAmount(totalTransferAmount)\r\n      setElevyAmount(elevyCharge)\r\n      setPlatformCharge(platformCharge)\r\n    } else if (amount > 0) {\r\n      let exempt = exemption(0)\r\n      let taxableAmount = getTaxableAmount(amount, exempt)\r\n      let elevyCharge = getElevyCharge(taxableAmount, elevyTax)\r\n      const platformCharge = calculatePlatformCharge(\r\n        sendingFrom,\r\n        sendingTo,\r\n        amount\r\n      )\r\n      let totalTransferAmount = amount + elevyCharge + platformCharge\r\n\r\n      setTransferAmount(totalTransferAmount)\r\n      setElevyAmount(elevyCharge)\r\n      setPlatformCharge(platformCharge)\r\n    } else {\r\n      setTransferAmount(amount)\r\n      setElevyAmount(0)\r\n    }\r\n  }, [amount, previousAmount, sendingFrom, sendingTo])\r\n\r\n  // event handlers\r\n  const handleChange = (event, callback) => {\r\n    const parsedAmount = parseInt(event.target.value.replaceAll(',', ''), 10)\r\n    if (!isNaN(parsedAmount)) {\r\n      callback(parsedAmount)\r\n    } else {\r\n      callback('')\r\n    }\r\n  }\r\n\r\n  const handlePickerChange = (event, selection) => {\r\n    console.log(selection)\r\n    setPickerType(selection)\r\n    setShowPicker(true)\r\n  }\r\n\r\n  const handleTab = event => {\r\n    if (event.keyCode == 13) {\r\n      elevyChargeRef.current.focus()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <MainContainer>\r\n      <form className='gridContainer' method='POST'>\r\n        <GridItem className='gridItemFull'>\r\n          <div className='inputGroup centerFlex'>\r\n            <h1 className='displayText'>E-LEVY CALCULATOR</h1>\r\n          </div>\r\n        </GridItem>\r\n\r\n        <GridItem className='gridItemFullMobileOnly'>\r\n          <ItemGroup>\r\n            <TextField\r\n              label='You want to send:'\r\n              id='amount'\r\n              placeholder='0'\r\n              inputProps={{\r\n                pattern: '[0-9,.]',\r\n                inputMode: 'numeric',\r\n                required: true,\r\n                value: amount.toLocaleString('en-US'),\r\n                onInput: e => handleChange(e, setAmount),\r\n                tabIndex: 1\r\n              }}\r\n            />\r\n          </ItemGroup>\r\n        </GridItem>\r\n\r\n        <GridItem className='gridItemFullMobileOnly'>\r\n          <ItemGroup>\r\n            <TextField\r\n              label='You have already sent today: (optional)'\r\n              id='previousAmount'\r\n              placeholder='0'\r\n              inputProps={{\r\n                pattern: '[0-9,.]',\r\n                inputMode: 'numeric',\r\n                value: previousAmount.toLocaleString('en-US'),\r\n                onInput: e => handleChange(e, setPreviousAmount),\r\n                tabIndex: 2,\r\n                onKeyUp: handleTab\r\n              }}\r\n            />\r\n          </ItemGroup>\r\n        </GridItem>\r\n\r\n        {/* Platform Picker */}\r\n        <GridItem className='gridItemFull'>\r\n          <ItemGroup className='pickerRow'>\r\n            <div className='platformPickerGrid'>\r\n              <FromPicker\r\n                title={platforms.get(sendingFrom).name}\r\n                theme={platforms.get(sendingFrom).theme}\r\n                id='from'\r\n                handleChange={handlePickerChange}\r\n              />\r\n              <PickerArrow />\r\n              <ToPicker\r\n                title={platforms.get(sendingTo).name}\r\n                theme={platforms.get(sendingTo).theme}\r\n                id='to'\r\n                handleChange={handlePickerChange}\r\n              />\r\n            </div>\r\n          </ItemGroup>\r\n        </GridItem>\r\n\r\n        {/* Charges */}\r\n        <GridItem className='noMargin'>\r\n          <ItemGroup className='divider chargePadding'>\r\n            <ChargeLabel className='alignRight' label='E-Levy Charge' />\r\n            <TextDisplay className='alignRight'>\r\n              <Charge value={elevyAmount} />\r\n            </TextDisplay>\r\n          </ItemGroup>\r\n        </GridItem>\r\n        <GridItem className='noMargin'>\r\n          <ItemGroup className='chargePadding'>\r\n            <ChargeLabel\r\n              label={`${platforms.get(sendingFrom).company} Charge`}\r\n            />\r\n            <TextDisplay>\r\n              <Charge\r\n                chargeProps={{ ref: elevyChargeRef, tabIndex: 5 }}\r\n                value={platformCharge}\r\n              />\r\n            </TextDisplay>\r\n          </ItemGroup>\r\n        </GridItem>\r\n\r\n        {/* Payment Amount and Switcher */}\r\n        <GridItem className='centerFlex gridItemFull'>\r\n          <ItemGroup>\r\n            <ChargeLabel className='alignCenter' label='You will pay:' />\r\n            <TextDisplay>\r\n              <Charge className='charge' value={transferAmount} />\r\n            </TextDisplay>\r\n          </ItemGroup>\r\n        </GridItem>\r\n        <GridItem className='gridItemFull'>\r\n          <ItemGroup className='centerFlex'>\r\n            <button\r\n              className='labelText button'\r\n              type='button'\r\n              onClick={e => {\r\n                e.preventDefault()\r\n                preserveChoice({\r\n                  advanced: false\r\n                })\r\n                showSimple()\r\n                return false\r\n              }}\r\n            >\r\n              Simple View\r\n            </button>\r\n          </ItemGroup>\r\n        </GridItem>\r\n\r\n        {/* Picker */}\r\n        {showPicker && (\r\n          <Picker\r\n            data={platforms}\r\n            selectedPicker={pickerType}\r\n            title={pickerData[pickerType].pickerTitle}\r\n            close={() => setShowPicker(false)}\r\n            updateChoice={pickerData[pickerType].updateChoice}\r\n          />\r\n        )}\r\n\r\n        <GridItem className='gridItemFull'>\r\n          <ItemGroup className='centerFlex'>\r\n            <GetOnGooglePlay />\r\n          </ItemGroup>\r\n        </GridItem>\r\n\r\n        {/* Disclaimer */}\r\n        <GridItem className='gridItemFull'>\r\n          <ItemGroup className='centerFlex'>\r\n            <Disclaimer />\r\n          </ItemGroup>\r\n        </GridItem>\r\n      </form>\r\n    </MainContainer>\r\n  )\r\n}\r\n\r\nexport default Advanced\r\n","import { h } from 'preact'\r\nimport { useEffect, useState } from 'preact/hooks'\r\n\r\nfunction getPWADisplayMode () {\r\n  const isStandalone = window.matchMedia('(display-mode: standalone)').matches\r\n  if (document.referrer.startsWith('android-app://')) {\r\n    return 'twa'\r\n  } else if (navigator.standalone || isStandalone) {\r\n    return 'standalone'\r\n  }\r\n  return 'browser'\r\n}\r\n\r\nconst GetOnGooglePlay = () => {\r\n  const [showBadge, setShowBadge] = useState(false)\r\n  useEffect(() => {\r\n    const pwaDisplayMode = getPWADisplayMode()\r\n    console.log('pwaDisplayMode', pwaDisplayMode)\r\n    if (pwaDisplayMode !== 'twa') {\r\n      setShowBadge(true)\r\n    }\r\n  }, [])\r\n  return (\r\n    <>\r\n      {showBadge && (\r\n        <a\r\n          href='https://play.google.com/store/apps/details?id=com.e_levy_calculator.www.twa&pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'\r\n          target='_blank'\r\n          rel='noopener noreferrer'\r\n        >\r\n          <img\r\n            alt='Get it on Google Play'\r\n            height={70}\r\n            src='https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png'\r\n          />\r\n        </a>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GetOnGooglePlay\r\n","import { h } from \"preact\";\r\n\r\nconst TextField = ({ label, id, placeholder, inputProps }) => {\r\n  return (\r\n    <>\r\n      <label for={id} className=\"labelText\">\r\n        {label}\r\n      </label>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          name={id}\r\n          placeholder={placeholder}\r\n          className=\"inputField\"\r\n          id={id}\r\n          {...inputProps}\r\n        />\r\n        <span className=\"currency\">GHS</span>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nTextField.defaultProps = {\r\n  label: \"label\",\r\n  id: \"\",\r\n  placeholder: \"\",\r\n  inputProps: {},\r\n};\r\n\r\nexport default TextField;\r\n"],"sourceRoot":""}