{"version":3,"sources":["webpack:///./components/form/TextField.js","webpack:///./utils/calculations.js","webpack:///./components/containers/GridItem.js","webpack:///./components/containers/ItemGroup.js","webpack:///./components/containers/MainContainer.js","webpack:///./components/form/PickerArrow.js","webpack:///./components/form/InlinePicker.js","webpack:///./components/form/PickerItem.js","webpack:///./components/form/Picker.js","webpack:///./utils/platformCharges.js","webpack:///./data/platforms.js","webpack:///./components/form/ChargeLabel.js","webpack:///./components/form/TextDisplay.js","webpack:///./components/form/Charge.js","webpack:///./components/global/Disclaimer.js","webpack:///./components/form/FromPicker.js","webpack:///./components/form/ToPicker.js","webpack:///./routes/advanced/index.js"],"names":["TextField","label","id","placeholder","inputProps","for","className","type","name","defaultProps","exemption","previousAmount","finalExemptionAmount","initialExemptAmount","getTaxableAmount","amount","exempt","taxableAmount","getElevyCharge","elevyTax","GridItem","children","ItemGroup","MainContainer","PickerArrow","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","InlinePicker","handleChange","title","theme","role","onClick","event","PickerItem","handleSelect","Picker","data","updateChoice","close","class","x1","y1","x2","y2","values","map","item","key","MTN_TO_MTN_CHARGE","platforms","Map","company","img","getCharge","source","destination","charge","rate","calculatePlatformCharge","sendingFrom","sendingTo","get","platformFunction","getPlatformCharge","ChargeLabel","TextDisplay","Charge","value","toLocaleString","maximumFractionDigits","minimumFractionDigits","Disclaimer","FromPicker","ToPicker","Advanced","showSimple","setAmount","useState","setPreviousAmount","showPicker","setShowPicker","pickerType","setPickerType","transferAmount","setTransferAmount","elevyAmount","setElevyAmount","setSendingFrom","setSendingTo","platformCharge","setPlatformCharge","pickerData","from","pickerTitle","to","useEffect","elevyCharge","callback","parsedAmount","parseInt","target","replaceAll","isNaN","handlePickerChange","selection","console","log","method","pattern","inputMode","required","onInput","e","preventDefault","selectedPicker"],"mappings":"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","file":"route-advanced.chunk.8ef56.esm.js","sourcesContent":["import { h } from \"preact\";\n\nconst TextField = ({ label, id, placeholder, inputProps }) => {\n  return (\n    <>\n      <label for={id} className=\"labelText\">\n        {label}\n      </label>\n      <div>\n        <input\n          type=\"text\"\n          name={id}\n          placeholder={placeholder}\n          className=\"inputField\"\n          id={id}\n          {...inputProps}\n        />\n        <span className=\"currency\">GHS</span>\n      </div>\n    </>\n  );\n};\n\nTextField.defaultProps = {\n  label: \"label\",\n  id: \"\",\n  placeholder: \"\",\n  inputProps: {},\n};\n\nexport default TextField;\n","import { platforms } from \"../data/platforms\";\n\nexport const elevyTax = 0.015; //1.5/100\n\nexport function exemption(previousAmount) {\n  let finalExemptionAmount = 0;\n  let initialExemptAmount = 100;\n  if (previousAmount >= initialExemptAmount) {\n    finalExemptionAmount = 0; //  user has used up all exemption value for the day and therefore has no exemptions left\n  } else if (previousAmount < initialExemptAmount) {\n    finalExemptionAmount = initialExemptAmount - previousAmount;\n  } else {\n    finalExemptionAmount = initialExemptAmount;\n  }\n  return finalExemptionAmount;\n}\n\nexport function getTaxableAmount(amount, exempt) {\n  let taxableAmount = amount - exempt;\n  if (taxableAmount < 0) {\n    return 0;\n  }\n\n  return taxableAmount;\n}\n\nexport function getElevyCharge(taxableAmount, elevyTax) {\n  let elevyCharge = taxableAmount * elevyTax;\n  return elevyCharge;\n}\n\nexport function calculateCharge({ previousAmount, amount }) {\n  // pick calculation from react component\n  let exempt = exemption(previousAmount);\n  let taxableAmount = getTaxableAmount(amount, exempt);\n  let elevyCharge = getElevyCharge(taxableAmount, elevyTax);\n  return elevyCharge;\n}\n\nexport function getPlatformCharge({ source, destination, amount }) {\n  // get platform charge\n  const platformFunction = platforms.get(source).getCharge;\n  const platformCharge = platformFunction({\n    source,\n    destination,\n    amount,\n  });\n  return platformCharge;\n}\n\nexport const calculatePlatformCharge = (sendingFrom, sendingTo, amount) => {\n  let source = \"\";\n  let destination = \"\";\n\n  if (sendingFrom === \"\" && sendingTo === \"\") {\n    return 0;\n  } else if (sendingFrom !== \"\" && sendingTo !== \"\") {\n    source = platforms.get(sendingFrom).key;\n    destination = platforms.get(sendingTo).key;\n  } else if (sendingFrom !== \"\") {\n    source = platforms.get(sendingFrom).key;\n    destination = platforms.get(sendingFrom).key;\n  }\n\n  const { charge } = getPlatformCharge({\n    source,\n    destination,\n    amount,\n  });\n  return charge;\n};\n","import { h } from \"preact\";\n\nconst GridItem = ({ className, children }) => {\n  return <div className={`gridItem ${className}`}>{children}</div>;\n};\n\nGridItem.defaultProps = {\n  className: \"\",\n};\n\nexport default GridItem;\n","import { h } from \"preact\";\n\nconst ItemGroup = ({ className, children }) => {\n  return <div className={`inputGroup ${className}`}>{children}</div>;\n};\n\nItemGroup.defaultProps = {\n  className: \"\",\n};\n\nexport default ItemGroup;\n","import { h } from \"preact\";\n\nconst MainContainer = ({ children }) => {\n  return <main className=\"mainContainer\">{children}</main>;\n};\n\nexport default MainContainer;\n","\nimport { h } from \"preact\";\n\nconst PickerArrow = () => {\n  return (\n    <div className=\"arrowContainer\">\n      <span className=\"arrow\">\n        <span className=\"alternateText\">to</span>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={24}\n          height={24}\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={2}\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          className=\"feather feather-arrow-right\"\n        >\n          <path d=\"M5 12L19 12\" />\n          <path d=\"M12 5L19 12 12 19\" />\n        </svg>\n      </span>\n    </div>\n  );\n};\n\nexport default PickerArrow;\n","import { h } from \"preact\";\n\nconst InlinePicker = ({ id, handleChange, title, theme }) => {\n  return (\n    <div className={`inlinePickerItem`}>\n      <div className={`selectedVisual ${theme}`} />\n      <div className=\"selectedText\">\n        <span className=\"selectedPlatform\">{title}</span>\n        <span\n          role=\"button\"\n          className=\"togglePicker pointer\"\n          onClick={(event) => handleChange(event, id)}\n        >\n          Tap to change\n        </span>\n      </div>\n    </div>\n  );\n};\n\nInlinePicker.defaultProps = {\n  theme: \"\",\n};\n\nexport default InlinePicker;\n","import { h } from \"preact\";\n\nconst PickerItem = ({ title, handleSelect, theme }) => {\n  return (\n    <div className={`pickerItem ${theme}`} role=\"button\" onClick={handleSelect}>\n      <span className=\"pickerContent\"></span>\n    </div>\n  );\n};\n\nPickerItem.defaultProps = {\n  title: \"\",\n  theme: \"\",\n};\n\nexport default PickerItem;\n","import { h } from \"preact\";\nimport PickerItem from \"./PickerItem\";\n\nconst Picker = ({ data, title, updateChoice, close }) => {\n  return (\n    <div className=\"overlayContainer\" onClick={() => close()}>\n      <div className=\"pickerContainer\">\n        <span className=\"close pointer\" role=\"button\" onClick={() => close()}>\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n            class=\"feather feather-x\"\n          >\n            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\" />\n            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\" />\n          </svg>\n        </span>\n        <div className=\"pickerTitle alignCenter\">\n          <span className=\"labelText\">{title}</span>\n        </div>\n        <div className=\"pickerItemContainer\">\n          {[...data.values()].map((item) => (\n            <PickerItem\n              key={item.key}\n              title={item.name}\n              theme={item.theme}\n              handleSelect={() => {\n                updateChoice(item.key);\n                close();\n                return false;\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Picker;\n","const MTN_TO_MTN_EXEMPT = 100;\nconst MTN_TO_MTN_CHARGE = 0.75;\nconst MTN_TO_OTHERS_EXEMPT = 50; // change to 100 cedis as per sara's screen shot and run test again\nconst MTN_TO_OTHERS_CHARGE = 0.75;\nconst MTN_ABOVE_1000_CAP = 1000; // above 1000 has a flat fee of 7.5gh\nconst ATMONEY_CHARGE = 0.75; // Same airtelTigo charge for all networks\nconst ATMONEY_ABOVE_1000_CAP = 1000; // above 1000 has a flat fee of 10gh\n\nexport function mtnMomoTariffs({ source, destination, amount }) {\n  let charge = 0;\n  let exempt = MTN_TO_OTHERS_EXEMPT;\n  let rate = MTN_TO_MTN_CHARGE;\n\n  if (destination === source) {\n    // mtn to mtn\n    if (amount >= MTN_ABOVE_1000_CAP) {\n      charge = 7.5;\n    } else if (amount > MTN_TO_MTN_EXEMPT) {\n      charge = (amount * MTN_TO_MTN_CHARGE) / 100;\n    }\n    exempt = MTN_TO_OTHERS_EXEMPT;\n    rate = MTN_TO_MTN_CHARGE;\n  } else {\n    //mtn to others\n    if (amount >= MTN_ABOVE_1000_CAP) {\n      charge = 7.5;\n    } else if (amount > MTN_TO_OTHERS_EXEMPT) {\n      charge = (amount * MTN_TO_OTHERS_CHARGE) / 100;\n    }\n    exempt = MTN_TO_OTHERS_EXEMPT;\n    rate = MTN_TO_OTHERS_CHARGE;\n  }\n\n  return {\n    charge,\n    exempt,\n    rate,\n  };\n}\n\nexport function vodafoneCashTariffs({}) {\n  return {\n    charge: 0,\n    exempt: 0,\n    rate: 0,\n  }; // Haha transfer charge de3 entua bi da! lol\n}\n\nexport function airtelTigoMoneyTariffs({ amount }) {\n  let charge = 0;\n  charge = (amount * ATMONEY_CHARGE) / 100;\n  if (amount >= ATMONEY_ABOVE_1000_CAP) {\n    charge = 7.5;\n  }\n\n  return {\n    charge,\n    exempt: 0,\n    rate: ATMONEY_CHARGE,\n  };\n}\n","import {\n  airtelTigoMoneyTariffs,\n  mtnMomoTariffs,\n  vodafoneCashTariffs,\n} from \"../utils/platformCharges\";\n\nexport const platforms = new Map([\n  [\n    \"mtn\",\n    {\n      name: \"MTN\",\n      company: \"MTN\",\n      img: \"./assets/white-waves.png\",\n      key: \"mtn\",\n      theme: \"mtn\",\n      getCharge: mtnMomoTariffs,\n    },\n  ],\n  [\n    \"vodafone\",\n    {\n      name: \"Vodafone\",\n      company: \"Vodafone\",\n      img: \"./assets/white-waves.png\",\n      key: \"vodafone\",\n      theme: \"vodafone\",\n      getCharge: vodafoneCashTariffs,\n    },\n  ],\n  [\n    \"airtel\",\n    {\n      name: \"AirtelTigo\",\n      company: \"AirtelTigo\",\n      img: \"./assets/white-waves.png\",\n      key: \"airtel\",\n      theme: \"airtel\",\n      getCharge: airtelTigoMoneyTariffs,\n    },\n  ],\n]);\n","import { h } from \"preact\";\n\nconst ChargeLabel = ({ label, className }) => {\n  return <span className={`labelText ${className}`}>{label}</span>;\n};\n\nChargeLabel.defaultProps = {\n  className: \"\",\n};\n\nexport default ChargeLabel;\n","import { h } from \"preact\";\n\nconst TextDisplay = ({ className, children }) => {\n  return <span className={`displayText ${className}`}>{children}</span>;\n};\n\nTextDisplay.defaultProps = {\n  className: \"\",\n};\n\nexport default TextDisplay;\n","import { h } from \"preact\";\n\nconst Charge = ({ className, value }) => {\n  return (\n    <span className={`chargeAlt ${className}`}>{`+ ${value.toLocaleString(\n      \"en-US\",\n      {\n        maximumFractionDigits: 2,\n        minimumFractionDigits: 2,\n      }\n    )} GHS`}</span>\n  );\n};\n\nCharge.defaultProps = {\n  className: \"\",\n};\n\nexport default Charge;\n","import { h } from \"preact\";\n\nconst Disclaimer = () => {\n  return (\n    <span className=\"disclaimer\">\n      Disclaimer: We did our best to provide accurate results, however you may\n      experience differences in real-world usage; Especially information on\n      Telco and GHIPPS charges, which are either unfortunately outdated or\n      non-existent.\n    </span>\n  );\n};\n\nexport default Disclaimer;\n","import { h } from \"preact\";\n\nconst FromPicker = ({ id, handleChange, title, theme }) => {\n  return (\n    <div className=\"fromGrid\">\n      <div className=\"selectedText alignRight\">\n        <span className=\"selectedPlatform\">{title}</span>\n        <span\n          role=\"button\"\n          className=\"togglePicker pointer\"\n          onClick={(event) => handleChange(event, id)}\n        >\n          Tap to change\n        </span>\n      </div>\n      <div\n        className={`selectedVisual ${theme} pointer`}\n        role=\"button\"\n        onClick={(event) => handleChange(event, id)}\n      />\n    </div>\n  );\n};\n\nFromPicker.defaultProps = {\n  theme: \"\",\n};\n\nexport default FromPicker;\n","import { h } from \"preact\";\n\nconst ToPicker = ({ id, handleChange, title, theme }) => {\n  return (\n    <div className=\"toGrid\">\n      <div\n        className={`selectedVisual ${theme} pointer`}\n        role=\"button\"\n        onClick={(event) => handleChange(event, id)}\n      />\n      <div className=\"selectedText\">\n        <span className=\"selectedPlatform\">{title}</span>\n        <span\n          role=\"button\"\n          className=\"togglePicker pointer\"\n          onClick={(event) => handleChange(event, id)}\n        >\n          Tap to change\n        </span>\n      </div>\n    </div>\n  );\n};\n\nToPicker.defaultProps = {\n  theme: \"\",\n};\n\nexport default ToPicker;\n","import { h } from \"preact\";\nimport { useState, useEffect } from \"preact/hooks\";\nimport GridItem from \"../../components/containers/GridItem\";\nimport ItemGroup from \"../../components/containers/ItemGroup\";\nimport MainContainer from \"../../components/containers/MainContainer\";\nimport PickerArrow from \"../../components/form/PickerArrow\";\nimport InlinePicker from \"../../components/form/InlinePicker\";\nimport Picker from \"../../components/form/Picker\";\nimport TextField from \"../../components/form/TextField\";\nimport { platforms } from \"../../data/platforms\";\nimport {\n  getElevyCharge,\n  exemption,\n  getTaxableAmount,\n  elevyTax,\n  calculatePlatformCharge,\n} from \"../../utils/calculations\";\nimport ChargeLabel from \"../../components/form/ChargeLabel\";\nimport TextDisplay from \"../../components/form/TextDisplay\";\nimport Charge from \"../../components/form/Charge\";\nimport Disclaimer from \"../../components/global/Disclaimer\";\nimport FromPicker from \"../../components/form/FromPicker\";\nimport ToPicker from \"../../components/form/ToPicker\";\n\nconst Advanced = ({ showSimple }) => {\n  // state\n  const [amount, setAmount] = useState(\"\");\n  const [previousAmount, setPreviousAmount] = useState(\"\");\n  const [showPicker, setShowPicker] = useState(false);\n  const [pickerType, setPickerType] = useState(\"\");\n  const [transferAmount, setTransferAmount] = useState(0);\n  const [elevyAmount, setElevyAmount] = useState(0);\n  const [sendingFrom, setSendingFrom] = useState(\"mtn\");\n  const [sendingTo, setSendingTo] = useState(\"mtn\");\n  const [platformCharge, setPlatformCharge] = useState(0);\n\n  const pickerData = {\n    from: {\n      pickerTitle: \"You are sending money using:\",\n      updateChoice: setSendingFrom,\n    },\n    to: {\n      pickerTitle: \"You are sending money to someone with:\",\n      updateChoice: setSendingTo,\n    },\n  };\n\n  // Effects\n  useEffect(() => {\n    if (amount == \"\") {\n      setTransferAmount(0);\n      setElevyAmount(0);\n    } else if (previousAmount !== \"\") {\n      let exempt = exemption(previousAmount);\n      let taxableAmount = getTaxableAmount(amount, exempt);\n      let elevyCharge = getElevyCharge(taxableAmount, elevyTax);\n      const platformCharge = calculatePlatformCharge(\n        sendingFrom,\n        sendingTo,\n        amount\n      );\n      let totalTransferAmount = amount + elevyCharge + platformCharge;\n\n      setTransferAmount(totalTransferAmount);\n      setElevyAmount(elevyCharge);\n      setPlatformCharge(platformCharge);\n    } else if (amount > 0) {\n      let exempt = exemption(0);\n      let taxableAmount = getTaxableAmount(amount, exempt);\n      let elevyCharge = getElevyCharge(taxableAmount, elevyTax);\n      const platformCharge = calculatePlatformCharge(\n        sendingFrom,\n        sendingTo,\n        amount\n      );\n      let totalTransferAmount = amount + elevyCharge + platformCharge;\n\n      setTransferAmount(totalTransferAmount);\n      setElevyAmount(elevyCharge);\n      setPlatformCharge(platformCharge);\n    } else {\n      setTransferAmount(amount);\n      setElevyAmount(0);\n    }\n  }, [amount, previousAmount, sendingFrom, sendingTo]);\n\n  // event handlers\n  const handleChange = (event, callback) => {\n    const parsedAmount = parseInt(event.target.value.replaceAll(\",\", \"\"), 10);\n    if (!isNaN(parsedAmount)) {\n      callback(parsedAmount);\n    } else {\n      callback(\"\");\n    }\n  };\n\n  const handlePickerChange = (event, selection) => {\n    console.log(selection);\n    setPickerType(selection);\n    setShowPicker(true);\n  };\n\n  return (\n    <MainContainer>\n      <form className=\"gridContainer\" method=\"POST\">\n        <GridItem className=\"gridItemFull\">\n          <div className=\"inputGroup centerFlex\">\n            <h1 className=\"displayText\">E-LEVY CALCULATOR</h1>\n          </div>\n        </GridItem>\n\n        <GridItem className=\"gridItemFullMobileOnly\">\n          <ItemGroup>\n            <TextField\n              label=\"You want to send:\"\n              id=\"amount\"\n              placeholder=\"0\"\n              inputProps={{\n                pattern: \"[0-9,.]\",\n                inputMode: \"numeric\",\n                required: true,\n                value: amount.toLocaleString(\"en-US\"),\n                onInput: (e) => handleChange(e, setAmount),\n              }}\n            />\n          </ItemGroup>\n        </GridItem>\n\n        <GridItem className=\"gridItemFullMobileOnly\">\n          <ItemGroup>\n            <TextField\n              label=\"You have already sent today: (optional)\"\n              id=\"previousAmount\"\n              placeholder=\"0\"\n              inputProps={{\n                pattern: \"[0-9,.]\",\n                inputMode: \"numeric\",\n                value: previousAmount.toLocaleString(\"en-US\"),\n                onInput: (e) => handleChange(e, setPreviousAmount),\n              }}\n            />\n          </ItemGroup>\n        </GridItem>\n\n        {/* Platform Picker */}\n        <GridItem className=\"gridItemFull\">\n          <ItemGroup className=\"pickerRow\">\n            <div className=\"platformPickerGrid\">\n              <FromPicker\n                title={platforms.get(sendingFrom).name}\n                theme={platforms.get(sendingFrom).theme}\n                id=\"from\"\n                handleChange={handlePickerChange}\n              />\n              <PickerArrow />\n              <ToPicker\n                title={platforms.get(sendingTo).name}\n                theme={platforms.get(sendingTo).theme}\n                id=\"to\"\n                handleChange={handlePickerChange}\n              />\n            </div>\n          </ItemGroup>\n        </GridItem>\n\n        {/* Charges */}\n        <GridItem className=\"noMargin\">\n          <ItemGroup className=\"divider chargePadding\">\n            <ChargeLabel className=\"alignRight\" label=\"E-Levy Charge\" />\n            <TextDisplay className=\"alignRight\">\n              <Charge value={elevyAmount} />\n            </TextDisplay>\n          </ItemGroup>\n        </GridItem>\n        <GridItem className=\"noMargin\">\n          <ItemGroup className=\"chargePadding\">\n            <ChargeLabel\n              label={`${platforms.get(sendingFrom).company} Charge`}\n            />\n            <TextDisplay>\n              <Charge value={platformCharge} />\n            </TextDisplay>\n          </ItemGroup>\n        </GridItem>\n\n        {/* Payment Amount and Switcher */}\n        <GridItem className=\"centerFlex gridItemFull\">\n          <ItemGroup>\n            <ChargeLabel className=\"alignCenter\" label=\"You will pay:\" />\n            <TextDisplay>\n              <Charge className=\"charge\" value={transferAmount} />\n            </TextDisplay>\n          </ItemGroup>\n        </GridItem>\n        <GridItem className=\"gridItemFull\">\n          <ItemGroup className=\"centerFlex\">\n            <button\n              className=\"labelText button\"\n              type=\"button\"\n              onClick={(e) => {\n                e.preventDefault();\n                showSimple();\n                return false;\n              }}\n            >\n              Calculate E-Levy Only\n            </button>\n          </ItemGroup>\n        </GridItem>\n\n        {/* Picker */}\n        {showPicker && (\n          <Picker\n            data={platforms}\n            selectedPicker={pickerType}\n            title={pickerData[pickerType].pickerTitle}\n            close={() => setShowPicker(false)}\n            updateChoice={pickerData[pickerType].updateChoice}\n          />\n        )}\n\n        {/* Disclaimer */}\n        <GridItem className=\"gridItemFull\">\n          <ItemGroup className=\"centerFlex\">\n            <Disclaimer />\n          </ItemGroup>\n        </GridItem>\n      </form>\n    </MainContainer>\n  );\n};\n\nexport default Advanced;\n"],"sourceRoot":""}